# SPDX-FileCopyrightText: 2022 Renaissance Computing Institute. All rights reserved.
#
# SPDX-License-Identifier: GPL-3.0-or-later
# SPDX-License-Identifier: LicenseRef-RENCI
# SPDX-License-Identifier: MIT

name: Pylint and Pytest the codebase

# trigger event is a push to the main repo branch (or a manual launch)
on:
  workflow_dispatch:
  push:
    branches:
    - main

# job definitions
jobs:
  # runs pylint
  lint:
    name: Execute pylint
    runs-on: ubuntu-latest

    # job steps
    steps:
      # checkout the codebase
      - name: Checkout the repository
        uses: actions/checkout@v2

      # cache the docker layers. this has a known issue so continue on error is ok
      - uses: satackey/action-docker-layer-caching@v0.0.8
        continue-on-error: true

      # build the image
      - name: Build docker image
        run: docker build -t archiver-testing -f Dockerfile.test .

      # run pylint
      - name: Run pylint and get the output
        run: |
          echo 'LINT_OUTPUT<<EOF' >> $GITHUB_ENV
          echo "$(docker run archiver-testing pylint --rcfile=.pylintrc --recursive=y ./)" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

  # runs pytest
  test:
    name: Execute pytest
    runs-on: ubuntu-latest

    # get the secrets for geoserver
    env:
        GEOSERVER_HOST: ${{ secrets.GEOSERVER_HOST }}
        GEOSERVER_PASSWORD: ${{ secrets.GEOSERVER_PASSWORD }}
        GEOSERVER_URL: ${{ secrets.GEOSERVER_URL }}
        GEOSERVER_USER: ${{ secrets.GEOSERVER_USER }}
        GEOSERVER_WORKSPACE: ${{ secrets.GEOSERVER_WORKSPACE }}

    # job steps
    steps:
      # checkout the codebase
      - name: Checkout the repository
        uses: actions/checkout@v2

      # cache the docker layers. this has a known issue so continue on error is ok
      - uses: satackey/action-docker-layer-caching@v0.0.8
        continue-on-error: true

      # build the image
      - name: Build docker image
        run: docker build -t archiver-testing -f Dockerfile.test .

      # run pylint
      - name: Run tests and get output
        run: |
          echo 'GEOSERVER_WORKSPACE: $GEOSERVER_WORKSPACE'
          echo 'TEST_OUTPUT<<EOF' >> $GITHUB_ENV
          echo "$(docker run archiver-testing pytest --cov)" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      # check for any issues
      - name: Exit if there are any test failures
        run: '[[ $TEST_OUTPUT != *FAILED* ]]'
